{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nvar postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var realSlug = slug.replace(/\\.md$/, '');\n  var fullPath = join(postsDirectory, \"\".concat(realSlug, \".md\"));\n  var fileContents = fs.readFileSync(fullPath, 'utf8');\n\n  var _matter = matter(fileContents),\n      data = _matter.data,\n      content = _matter.content;\n\n  var items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(function (field) {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts() {\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var slugs = getPostSlugs();\n  var posts = slugs.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by date in descending order\n  .sort(function (post1, post2) {\n    return post1.date > post2.date ? -1 : 1;\n  });\n  return posts;\n}\nexport function getStrapiURL() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return \"\".concat(process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\").concat(path);\n} // Helper to make GET requests to Strapi\n\nexport function fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var requestUrl, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestUrl = getStrapiURL(path);\n            _context.next = 3;\n            return fetch(requestUrl);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/cale/Dev/Typenine/resolve/frontend/lib/api.ts"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","replace","fullPath","fileContents","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","posts","map","sort","post1","post2","date","getStrapiURL","path","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","requestUrl","fetch","response","json"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,IAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAA4D;AAAA,MAAvBC,MAAuB,uEAAJ,EAAI;AACjE,MAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAjB;AACA,MAAMC,QAAQ,GAAGZ,IAAI,CAACE,cAAD,YAAoBQ,QAApB,SAArB;AACA,MAAMG,YAAY,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;;AAHiE,gBAIvCX,MAAM,CAACY,YAAD,CAJiC;AAAA,MAIzDE,IAJyD,WAIzDA,IAJyD;AAAA,MAInDC,OAJmD,WAInDA,OAJmD;;AAUjE,MAAMC,KAAY,GAAG,EAArB,CAViE,CAYjE;;AACAR,EAAAA,MAAM,CAACS,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeT,QAAf;AACD;;AACD,QAAIS,KAAK,KAAK,SAAd,EAAyB;AACvBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACD;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACfF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACD;AACF,GAXD;AAaA,SAAOF,KAAP;AACD;AAED,OAAO,SAASG,WAAT,GAA4C;AAAA,MAAvBX,MAAuB,uEAAJ,EAAI;AACjD,MAAMY,KAAK,GAAGhB,YAAY,EAA1B;AACA,MAAMiB,KAAK,GAAGD,KAAK,CAChBE,GADW,CACP,UAACf,IAAD;AAAA,WAAUD,aAAa,CAACC,IAAD,EAAOC,MAAP,CAAvB;AAAA,GADO,EAEZ;AAFY,GAGXe,IAHW,CAGN,UAACC,KAAD,EAAQC,KAAR;AAAA,WAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAAlD;AAAA,GAHM,CAAd;AAIA,SAAOL,KAAP;AACD;AAED,OAAO,SAASM,YAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC,mBACE1B,OAAO,CAAC2B,GAAR,CAAYC,0BAAZ,IAA0C,uBAD5C,SAEGF,IAFH;AAGD,C,CAED;;AACA,gBAAsBG,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBH,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCI,YAAAA,UADD,GACcL,YAAY,CAACC,IAAD,CAD1B;AAAA;AAAA,mBAEkBK,KAAK,CAACD,UAAD,CAFvB;;AAAA;AAECE,YAAAA,QAFD;AAAA;AAAA,mBAGcA,QAAQ,CAACC,IAAT,EAHd;;AAAA;AAGCrB,YAAAA,IAHD;AAAA,6CAIEA,IAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs'\nimport { join } from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n  const realSlug = slug.replace(/\\.md$/, '')\n  const fullPath = join(postsDirectory, `${realSlug}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n  const { data, content } = matter(fileContents)\n\n  type Items = {\n    [key: string]: string\n  }\n\n  const items: Items = {}\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug\n    }\n    if (field === 'content') {\n      items[field] = content\n    }\n\n    if (data[field]) {\n      items[field] = data[field]\n    }\n  })\n\n  return items\n}\n\nexport function getAllPosts(fields: string[] = []) {\n  const slugs = getPostSlugs()\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by date in descending order\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1))\n  return posts\n}\n\nexport function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path: string) {\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return data;\n}"]},"metadata":{},"sourceType":"module"}