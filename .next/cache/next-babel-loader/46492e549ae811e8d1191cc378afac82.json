{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/cale/Dev/Typenine/resolve/frontend/pages/articles/[slug].tsx\";\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Container from \"../../components/container\";\nimport ArticleBody from \"../../components/article-body\";\nimport Header from \"../../components/header\";\nimport ArticleHeader from \"../../components/article-header\";\nimport Layout from \"../../components/layout\";\nimport { fetchAPI } from \"../../lib/api\";\nimport ArticleTitle from \"../../components/article-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\n\nconst Article = ({\n  article,\n  moreArticles,\n  preview\n}) => {\n  const router = useRouter();\n\n  if (!router.isFallback && !(article === null || article === void 0 ? void 0 : article.slug)) {\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {\n      statusCode: 404\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    preview: preview,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), router.isFallback ? /*#__PURE__*/_jsxDEV(ArticleTitle, {\n        children: \"Loading\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"mb-32\",\n          children: [/*#__PURE__*/_jsxDEV(Head, {\n            children: /*#__PURE__*/_jsxDEV(\"title\", {\n              children: [article.title, \" | Next.js Blog Example with \", CMS_NAME]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArticleHeader, {\n            title: article.title,\n            coverImage: article.coverImage,\n            date: article.date,\n            author: article.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArticleBody, {\n            content: article.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const articles = await fetchAPI(\"/articles\");\n  return {\n    paths: articles.map(article => ({\n      params: {\n        slug: article.slug\n      }\n    })),\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const articles = await fetchAPI(`/articles?slug=${params.slug}&status=published`);\n  const categories = await fetchAPI(\"/categories\");\n  return {\n    props: {\n      article: articles[0],\n      categories\n    },\n    revalidate: 1\n  };\n}\nexport default Article; // export async function getStaticProps({ params }: Params) {\n//   const article = getArticleBySlug(params.slug, [\n//     \"title\",\n//     \"date\",\n//     \"slug\",\n//     \"author\",\n//     \"content\",\n//     \"ogImage\",\n//     \"coverImage\",\n//   ]);\n//   const content = await markdownToHtml(article.content || \"\");\n//   return {\n//     props: {\n//       article: {\n//         ...article,\n//         content,\n//       },\n//     },\n//   };\n// }\n// export async function getStaticPaths() {\n//   const articles = getAllArticles([\"slug\"]);\n//   return {\n//     paths: articles.map((articles) => {\n//       return {\n//         params: {\n//           slug: articles.slug,\n//         },\n//       };\n//     }),\n//     fallback: false,\n//   };\n// }","map":{"version":3,"sources":["/Users/cale/Dev/Typenine/resolve/frontend/pages/articles/[slug].tsx"],"names":["useRouter","ErrorPage","Container","ArticleBody","Header","ArticleHeader","Layout","fetchAPI","ArticleTitle","Head","CMS_NAME","Article","article","moreArticles","preview","router","isFallback","slug","title","coverImage","date","author","content","getStaticPaths","articles","paths","map","params","fallback","getStaticProps","categories","props","revalidate"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Container from \"../../components/container\";\nimport ArticleBody from \"../../components/article-body\";\nimport Header from \"../../components/header\";\nimport ArticleHeader from \"../../components/article-header\";\nimport Layout from \"../../components/layout\";\nimport { fetchAPI } from \"../../lib/api\";\nimport ArticleTitle from \"../../components/article-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\nimport markdownToHtml from \"../../lib/markdownToHtml\";\nimport ArticleType from \"../../types/article\";\n\ntype Props = {\n  article: ArticleType;\n  moreArticles: ArticleType[];\n  preview?: boolean;\n};\n\nconst Article = ({ article, moreArticles, preview }: Props) => {\n  const router = useRouter();\n  if (!router.isFallback && !article?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n  return (\n    <Layout preview={preview}>\n      <Container>\n        <Header />\n        {router.isFallback ? (\n          <ArticleTitle>Loadingâ€¦</ArticleTitle>\n        ) : (\n          <>\n            <article className=\"mb-32\">\n              <Head>\n                <title>\n                  {article.title} | Next.js Blog Example with {CMS_NAME}\n                </title>\n                {/* <meta property=\"og:image\" content={article.ogImage.url} /> */}\n              </Head>\n              <ArticleHeader\n                title={article.title}\n                coverImage={article.coverImage}\n                date={article.date}\n                author={article.author}\n              />\n              <ArticleBody content={article.content} />\n            </article>\n          </>\n        )}\n      </Container>\n    </Layout>\n  );\n};\n\ntype Params = {\n  params: {\n    slug: string;\n  };\n};\n\nexport async function getStaticPaths() {\n  const articles = await fetchAPI(\"/articles\");\n\n  return {\n    paths: articles.map((article: ArticleType) => ({\n      params: {\n        slug: article.slug,\n      },\n    })),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  const articles = await fetchAPI(\n    `/articles?slug=${params.slug}&status=published`\n  );\n  const categories = await fetchAPI(\"/categories\");\n\n  return {\n    props: { article: articles[0], categories },\n    revalidate: 1,\n  };\n}\n\nexport default Article;\n\n// export async function getStaticProps({ params }: Params) {\n//   const article = getArticleBySlug(params.slug, [\n//     \"title\",\n//     \"date\",\n//     \"slug\",\n//     \"author\",\n//     \"content\",\n//     \"ogImage\",\n//     \"coverImage\",\n//   ]);\n//   const content = await markdownToHtml(article.content || \"\");\n\n//   return {\n//     props: {\n//       article: {\n//         ...article,\n//         content,\n//       },\n//     },\n//   };\n// }\n\n// export async function getStaticPaths() {\n//   const articles = getAllArticles([\"slug\"]);\n\n//   return {\n//     paths: articles.map((articles) => {\n//       return {\n//         params: {\n//           slug: articles.slug,\n//         },\n//       };\n//     }),\n//     fallback: false,\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}