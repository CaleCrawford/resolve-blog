{"ast":null,"code":"// import fs from 'fs'\nimport { join } from 'path';\nconst postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {// return fs.readdirSync(postsDirectory)\n}\nexport function getPostBySlug(slug, fields = []) {// const realSlug = slug.replace(/\\.md$/, '')\n  // const fullPath = join(postsDirectory, `${realSlug}.md`)\n  // // const fileContents = fs.readFileSync(fullPath, 'utf8')\n  // const { data, content } = matter(fileContents)\n  // type Items = {\n  //   [key: string]: string\n  // }\n  // const items: Items = {}\n  // // Ensure only the minimal needed data is exposed\n  // fields.forEach((field) => {\n  //   if (field === 'slug') {\n  //     items[field] = realSlug\n  //   }\n  //   if (field === 'content') {\n  //     items[field] = content\n  //   }\n  //   if (data[field]) {\n  //     items[field] = data[field]\n  //   }\n  // })\n  // return items\n}\nexport function getAllPosts(fields = []) {// const slugs = getPostSlugs()\n  // const posts = slugs\n  //   .map((slug) => getPostBySlug(slug, fields))\n  //   // sort posts by date in descending order\n  //   .sort((post1, post2) => (post1.date > post2.date ? -1 : 1))\n  // return posts\n}\nexport function getStrapiURL(path = \"\") {\n  return `${process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"}${path}`;\n} // Helper to make GET requests to Strapi\n\nexport async function fetchAPI(path) {\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return data;\n}","map":{"version":3,"sources":["/Users/cale/Dev/Typenine/resolve/frontend/lib/api.ts"],"names":["join","postsDirectory","process","cwd","getPostSlugs","getPostBySlug","slug","fields","getAllPosts","getStrapiURL","path","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","requestUrl","response","fetch","data","json"],"mappings":"AAAA;AACA,SAASA,IAAT,QAAqB,MAArB;AAGA,MAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB,CAC7B;AACD;AAED,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAAqCC,MAAgB,GAAG,EAAxD,EAA4D,CACjE;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACD;AAED,OAAO,SAASC,WAAT,CAAqBD,MAAgB,GAAG,EAAxC,EAA4C,CACjD;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,SAASE,YAAT,CAAsBC,IAAI,GAAG,EAA7B,EAAiC;AACtC,SAAQ,GACNR,OAAO,CAACS,GAAR,CAAYC,0BAAZ,IAA0C,uBAC3C,GAAEF,IAAK,EAFR;AAGD,C,CAED;;AACA,OAAO,eAAeG,QAAf,CAAwBH,IAAxB,EAAsC;AAC3C,QAAMI,UAAU,GAAGL,YAAY,CAACC,IAAD,CAA/B;AACA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAOD,IAAP;AACD","sourcesContent":["// import fs from 'fs'\nimport { join } from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n  // return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n  // const realSlug = slug.replace(/\\.md$/, '')\n  // const fullPath = join(postsDirectory, `${realSlug}.md`)\n  // // const fileContents = fs.readFileSync(fullPath, 'utf8')\n  // const { data, content } = matter(fileContents)\n\n  // type Items = {\n  //   [key: string]: string\n  // }\n\n  // const items: Items = {}\n\n  // // Ensure only the minimal needed data is exposed\n  // fields.forEach((field) => {\n  //   if (field === 'slug') {\n  //     items[field] = realSlug\n  //   }\n  //   if (field === 'content') {\n  //     items[field] = content\n  //   }\n\n  //   if (data[field]) {\n  //     items[field] = data[field]\n  //   }\n  // })\n\n  // return items\n}\n\nexport function getAllPosts(fields: string[] = []) {\n  // const slugs = getPostSlugs()\n  // const posts = slugs\n  //   .map((slug) => getPostBySlug(slug, fields))\n  //   // sort posts by date in descending order\n  //   .sort((post1, post2) => (post1.date > post2.date ? -1 : 1))\n  // return posts\n}\n\nexport function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path: string) {\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return data;\n}"]},"metadata":{},"sourceType":"module"}