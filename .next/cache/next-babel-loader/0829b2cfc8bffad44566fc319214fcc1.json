{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n// import fs from 'fs'\nimport { join } from 'path';\nvar postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {// return fs.readdirSync(postsDirectory)\n}\nexport function getPostBySlug(slug) {// const realSlug = slug.replace(/\\.md$/, '')\n  // const fullPath = join(postsDirectory, `${realSlug}.md`)\n  // // const fileContents = fs.readFileSync(fullPath, 'utf8')\n  // const { data, content } = matter(fileContents)\n  // type Items = {\n  //   [key: string]: string\n  // }\n  // const items: Items = {}\n  // // Ensure only the minimal needed data is exposed\n  // fields.forEach((field) => {\n  //   if (field === 'slug') {\n  //     items[field] = realSlug\n  //   }\n  //   if (field === 'content') {\n  //     items[field] = content\n  //   }\n  //   if (data[field]) {\n  //     items[field] = data[field]\n  //   }\n  // })\n  // return items\n\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n}\nexport function getAllPosts() {// const slugs = getPostSlugs()\n  // const posts = slugs\n  //   .map((slug) => getPostBySlug(slug, fields))\n  //   // sort posts by date in descending order\n  //   .sort((post1, post2) => (post1.date > post2.date ? -1 : 1))\n  // return posts\n\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n}\nexport function getStrapiURL() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return \"\".concat(process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\").concat(path);\n} // Helper to make GET requests to Strapi\n\nexport function fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var requestUrl, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestUrl = getStrapiURL(path);\n            _context.next = 3;\n            return fetch(requestUrl);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/cale/Dev/Typenine/resolve/frontend/lib/api.ts"],"names":["join","postsDirectory","process","cwd","getPostSlugs","getPostBySlug","slug","fields","getAllPosts","getStrapiURL","path","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","requestUrl","fetch","response","json","data"],"mappings":";;AAAA;AACA,SAASA,IAAT,QAAqB,MAArB;AAGA,IAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB,CAC7B;AACD;AAED,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA4D,CACjE;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AA1BiE,MAAvBC,MAAuB,uEAAJ,EAAI;AA2BlE;AAED,OAAO,SAASC,WAAT,GAA4C,CACjD;AACA;AACA;AACA;AACA;AACA;;AANiD,MAAvBD,MAAuB,uEAAJ,EAAI;AAOlD;AAED,OAAO,SAASE,YAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC,mBACER,OAAO,CAACS,GAAR,CAAYC,0BAAZ,IAA0C,uBAD5C,SAEGF,IAFH;AAGD,C,CAED;;AACA,gBAAsBG,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBH,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCI,YAAAA,UADD,GACcL,YAAY,CAACC,IAAD,CAD1B;AAAA;AAAA,mBAEkBK,KAAK,CAACD,UAAD,CAFvB;;AAAA;AAECE,YAAAA,QAFD;AAAA;AAAA,mBAGcA,QAAQ,CAACC,IAAT,EAHd;;AAAA;AAGCC,YAAAA,IAHD;AAAA,6CAIEA,IAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// import fs from 'fs'\nimport { join } from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n  // return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n  // const realSlug = slug.replace(/\\.md$/, '')\n  // const fullPath = join(postsDirectory, `${realSlug}.md`)\n  // // const fileContents = fs.readFileSync(fullPath, 'utf8')\n  // const { data, content } = matter(fileContents)\n\n  // type Items = {\n  //   [key: string]: string\n  // }\n\n  // const items: Items = {}\n\n  // // Ensure only the minimal needed data is exposed\n  // fields.forEach((field) => {\n  //   if (field === 'slug') {\n  //     items[field] = realSlug\n  //   }\n  //   if (field === 'content') {\n  //     items[field] = content\n  //   }\n\n  //   if (data[field]) {\n  //     items[field] = data[field]\n  //   }\n  // })\n\n  // return items\n}\n\nexport function getAllPosts(fields: string[] = []) {\n  // const slugs = getPostSlugs()\n  // const posts = slugs\n  //   .map((slug) => getPostBySlug(slug, fields))\n  //   // sort posts by date in descending order\n  //   .sort((post1, post2) => (post1.date > post2.date ? -1 : 1))\n  // return posts\n}\n\nexport function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path: string) {\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return data;\n}"]},"metadata":{},"sourceType":"module"}